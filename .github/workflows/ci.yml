name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        # Install flake8 if not in requirements
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pip install pytest pytest-asyncio
        pytest --verbose
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Test CLI installation
      run: |
        # Test that CLI commands are available
        arena --help
        python scripts/arena_cli.py --help

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t inbox-arena:test .

    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container -p 8000:8000 inbox-arena:test
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      run: |
        pip install safety bandit
        # Check for known security vulnerabilities
        safety check
        # Static security analysis
        bandit -r src/ -f json || true

  type-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-requests

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports || true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run integration tests
      run: |
        # Start email server in background
        python -m src.email_server &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Run integration tests
        python scripts/run_full_game_test.py &
        GAME_PID=$!
        
        # Wait for game to complete
        sleep 30
        
        # Clean up
        kill $SERVER_PID $GAME_PID || true
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  release:
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload to Test PyPI
      if: success()
      run: |
        twine upload --repository testpypi dist/* --skip-existing
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Build documentation
      run: |
        # Create simple docs site from README
        mkdir -p docs-site
        cp README.md docs-site/index.md
        cp CONTRIBUTING.md docs-site/
        cp CHANGELOG.md docs-site/
        
        # Convert markdown to HTML (simple version)
        echo '<html><head><title>Inbox Arena</title><style>body{font-family:Arial;max-width:800px;margin:0 auto;padding:20px;}</style></head><body>' > docs-site/index.html
        # You could add markdown-to-HTML conversion here
        echo '</body></html>' >> docs-site/index.html

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs-site

    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v2